///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/**
 * 单体模式( singleton mode )
 *
 *
 * 保证有且仅有一个特定类的实例
 *
 ** 当重复 new 创建实例时应返回同一个实例
 */


//-------------------------------------------------------------------------------------------------------------------//


/**
 * 实现方式
 *
 *
 * 1. 可以使用全局变量来存储该实例, ( 不推荐: 因全局变量可能被覆盖等 )
 *
 * 2. 可以在构造函数的静态属性中缓存该实例, js 中函数也是对象, 因此它也可以有属性
 *    ( 可以将实例缓存进 Universe.instance 的属性中, 但该属性会暴露在外部, 外部可能会修改该属性, 从而导致丢失该实例 )
 *
 * 3. 可以将实例存放在闭包中
 *    ( 私有化实例, 但会增加额外内存开销 )
 */


//-------------------------------------------------------------------------------------------------------------------//

// 静态属性中的实例

//- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - -//


function Universe() {

    // 判断是否有一个现有的实例
    if (typeof Universe.instance === 'object') return Universe.instance;

    // 正常进行
    this.start_time = 0;
    this.bang = 'Big';

    // 缓存
    Universe.instance = this;

    // 隐式返回
    return this;
}



//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -//

// 闭包中的实例

//- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - -//







//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -//

//

//- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - -//







///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
